name: Backend tests

on:
  workflow_dispatch:
  pull_request:
    paths:
      - "backend/**"
    branches:
      - dev

permissions:
  contents: read

jobs:
  type_check_backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        run: |
          cd backend
          poetry install --with dev --no-interaction --no-root
          pip install mypy pydantic[mypy]

      - name: Get changed Python files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            backend/**/*.py

      - name: Run mypy on changed files
        if: steps.changed-files.outputs.any_changed == 'true'
        run: mypy ${{ steps.changed-files.outputs.all_changed_files }} --ignore-missing-imports --follow-imports=silent || exit 1

  test_back:
    needs: type_check_backend
    runs-on: ubuntu-latest
    environment: test
    timeout-minutes: 4

    steps:
      - uses: actions/checkout@v4

      - name: Install Temporal CLI
        uses: temporalio/setup-temporal@v0

      - name: Start a local Temporal server
        shell: bash
        run: temporal server start-dev --headless &

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"

      # Install dependencies if cache does not exist
      - name: Install dependencies
        run: |
          cd backend
          poetry install --with dev --no-interaction --no-root

      - name: Test with pytest
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          ENVIRONMENT: "test"
          SLACK_URL: ${{ secrets.SLACK_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          PROPELAUTH_API_KEY: ${{ secrets.PROPELAUTH_API_KEY }}
          PROPELAUTH_URL: ${{ vars.PROPELAUTH_URL }}
          MONGODB_URL: ${{ secrets.MONGODB_URL }}
          MONGODB_NAME: ${{ vars.MONGODB_NAME }}
          QDRANT_URL: ${{ secrets.QDRANT_URL }}
          QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY }}
          PHOSPHO_API_KEY: ${{ secrets.PHOSPHO_API_KEY }}
          PHOSPHO_BACKEND_URL: ${{ vars.PHOSPHO_BACKEND_URL }}
          TEST_PROPELAUTH_ORG_ID: ${{ vars.TEST_PROPELAUTH_ORG_ID }}
          TEST_PROPELAUTH_USER_ID: ${{ vars.TEST_PROPELAUTH_USER_ID }}
          PHOSPHO_API_KEY_ONBOARDING: ${{ secrets.PHOSPHO_API_KEY_ONBOARDING }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          EXTRACTOR_URL: ${{ vars.EXTRACTOR_URL }}
          ANYSCALE_API_KEY: ${{ secrets.ANYSCALE_API_KEY }}
          PHOSPHO_AI_HUB_URL: ${{ vars.PHOSPHO_AI_HUB_URL }}
          PHOSPHO_AI_HUB_API_KEY: ${{ secrets.PHOSPHO_AI_HUB_API_KEY }}
          TEMPORAL_HOST_URL: "http://localhost:7233"
          TEMPORAL_NAMESPACE: "default"
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          TAK_SEARCH_URL: ${{ vars.TAK_SEARCH_URL }}
          TAK_APP_API_KEY: ${{ secrets.TAK_APP_API_KEY }}
        run: |
          cd backend
          poetry run pytest tests/api/ -vvv
          poetry run pytest tests/services/ -vvv