import {
  DetectionScope,
  EventDefinition,
  ScoreRangeType,
} from "@/models/models";

export const getEventsFromTemplateName = (
  templateName: string,
  selectedOrgId: string,
  project_id: string,
) => {
  /*
   * Return a list of event definitions based on the template name
   */

  let events;
  const eventBase = {
    org_id: selectedOrgId,
    project_id: project_id,
  };
  const soundsRobotic = {
    ...eventBase,
    event_name: "Robotic response",
    description:
      "The text generated by the assistant sounds robotic, artificial, weird.",
    detection_scope: DetectionScope.TaskOutputOnly,
  };
  const verbose = {
    ...eventBase,
    event_name: "Verbose",
    description:
      "The text generated by the assistant is too long, too boring, too confusive or too repetitive.",
    detection_scope: DetectionScope.TaskOutputOnly,
  };
  const userSentiment = {
    ...eventBase,
    event_name: "User sentiment",
    description:
      "Rate the sentiment of the user input. 1 is negative (sad, frustrated, confused), 5 is positive (happy, satisfied).",
    detection_scope: DetectionScope.TaskInputOnly,
    score_range_settings: {
      min: 1,
      max: 5,
      score_type: ScoreRangeType.range,
      categories: [],
    },
  };
  const toxicContent = {
    ...eventBase,
    event_name: "Toxic agent",
    description: "The assistant has generated curse words or toxic content.",
    detection_scope: DetectionScope.TaskOutputOnly,
  };
  const penetrationTesting = {
    ...eventBase,
    event_name: "Penetration testing",
    description: "The user is trying to jailbreak the LLM app.",
    detection_scope: DetectionScope.TaskInputOnly,
  };
  const humanRequest = {
    ...eventBase,
    event_name: "Ask human",
    description:
      "The user is asking to talk to a human, a real person, or an actual operator.",
    detection_scope: DetectionScope.TaskInputOnly,
  };
  const successFullSession = {
    ...eventBase,
    event_name: "Issue resolved",
    description:
      "The conversation was successful for the end user. The user acknowledged that the problem was solved.",
    detection_scope: DetectionScope.Session,
  };
  const upsell = {
    ...eventBase,
    event_name: "Up-sell",
    description:
      "The assistant has generated a response that tries to upsell a product or service.",
    detection_scope: DetectionScope.Task,
  };
  const answeredQuestion = {
    ...eventBase,
    event_name: "Answered question",
    description:
      "The assistant has generated a response that answers a question. The user acknowledged that the question was answered.",
    detection_scope: DetectionScope.Session,
  };
  const citedSource = {
    ...eventBase,
    event_name: "Sourced",
    description:
      "The assistant has generated a response that cites a source or references a website.",
    detection_scope: DetectionScope.TaskOutputOnly,
  };
  const userIndustry = {
    ...eventBase,
    event_name: "User industry",
    description:
      "Guess the most likely industry of the user based on the information provided. For example, if a question is relevant only for a specific industry.",
    detection_scope: DetectionScope.TaskInputOnly,
    score_range_settings: {
      score_type: ScoreRangeType.category,
      categories: [
        "Technology",
        "Finance",
        "Healthcare",
        "Education",
        "Retail",
        "Manufacturing",
        "Entertainment",
        "Government",
      ],
    },
  };
  const userJobTitle = {
    ...eventBase,
    event_name: "User job title",
    description:
      "Based on the information provided by the user, return the user's job title. For example, if the user mentions their job title, or asks a question only relevant for a specific job title",
    detection_scope: DetectionScope.TaskInputOnly,
    score_range_settings: {
      score_type: ScoreRangeType.category,
      categories: [
        "Software Engineer",
        "Doctor",
        "Teacher",
        "Salesperson",
        "Executive",
        "Student",
        "Journalist",
        "Economist",
        "Artist",
      ],
    },
  };
  const productLine = {
    ...eventBase,
    event_name: "Product category",
    description:
      "If the user has mentioned a product or asked a question only relevant for a specific product category, return the product category.",
    detection_scope: DetectionScope.TaskInputOnly,
    score_range_settings: {
      score_type: ScoreRangeType.category,
      categories: [
        "Electronics",
        "Fashion",
        "Automotive",
        "Food",
        "Books",
        "Furniture",
        "Entertainment",
      ],
    },
  };

  if (templateName === "Text generation") {
    events = [soundsRobotic, verbose, userSentiment, toxicContent];
  }
  if (templateName === "Sales assistant") {
    events = [
      upsell,
      productLine,
      userJobTitle,
      userIndustry,
      userSentiment,
      penetrationTesting,
      toxicContent,
      soundsRobotic,
    ];
  }
  if (templateName === "Customer support") {
    events = [
      successFullSession,
      humanRequest,
      userJobTitle,
      userIndustry,
      userSentiment,
      penetrationTesting,
      toxicContent,
    ];
  }
  if (templateName === "Knowledge assistant") {
    events = [
      answeredQuestion,
      citedSource,
      userJobTitle,
      userIndustry,
      userSentiment,
      verbose,
      soundsRobotic,
    ];
  }
  if (templateName === "All") {
    events = [
      answeredQuestion,
      citedSource,
      successFullSession,
      humanRequest,
      upsell,
      productLine,
      userJobTitle,
      userIndustry,
      userSentiment,
      penetrationTesting,
      toxicContent,
      soundsRobotic,
      verbose,
    ];
  }

  return events as EventDefinition[];
};
